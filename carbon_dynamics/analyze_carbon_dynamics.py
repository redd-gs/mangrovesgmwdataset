"""
Script principal pour analyser les dynamiques de carbone des mangroves.

Ce script utilise le module carbon_dynamics pour analyser les stocks et flux de carbone
en fonction des conditions hydrodynamiques et des mar√©es.
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from carbon_dynamics.hydrodynamic_model import HydrodynamicModel
from pipeline.src.config.settings_s2 import settings_s2

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def get_sample_data():
    """
    R√©cup√®re des donn√©es d'exemple pour tester l'analyse.
    
    Returns:
        Tuple (image_paths, timestamps)
    """
    cfg = settings_s2()
    data_dir = Path(cfg.OUTPUT_DIR_TIME_SERIES)
    
    # Chercher les images g√©n√©r√©es
    image_paths = []
    image_files = list(data_dir.glob("*.png"))
    
    if not image_files:
        logger.warning("Aucune image trouv√©e dans le r√©pertoire de sortie")
        # Cr√©er des donn√©es d'exemple
        image_paths = [str(data_dir / f"gmw_{i}.png") for i in range(1, 6)]
    else:
        image_paths = [str(f) for f in sorted(image_files)[:10]]  # Maximum 10 images
    
    # G√©n√©rer des timestamps correspondants (une image tous les 15 jours)
    start_date = datetime(2023, 1, 1)
    timestamps = [start_date + timedelta(days=i*15) for i in range(len(image_paths))]
    
    return image_paths, timestamps


def main():
    """
    Fonction principale pour l'analyse des dynamiques de carbone.
    """
    logger.info("=== ANALYSE DES DYNAMIQUES DE CARBONE DES MANGROVES ===")
    
    try:
        # Configuration
        cfg = settings_s2()
        
        # Coordonn√©es d'exemple (Singapour - zone de mangroves)
        location_lat = 1.3521  # Latitude de Singapour
        location_lon = 103.8198  # Longitude de Singapour
        pixel_size_m = 10.0  # R√©solution Sentinel-2
        
        logger.info(f"Zone d'√©tude: {location_lat}¬∞N, {location_lon}¬∞E")
        logger.info(f"R√©solution spatiale: {pixel_size_m}m")
        
        # Initialiser le mod√®le hydrodynamique
        hydro_model = HydrodynamicModel(
            location_lat=location_lat,
            location_lon=location_lon,
            pixel_size_m=pixel_size_m
        )
        
        # R√©cup√©rer les donn√©es d'exemple
        image_paths, timestamps = get_sample_data()
        logger.info(f"Nombre d'images √† analyser: {len(image_paths)}")
        
        # V√©rifier que les fichiers existent
        existing_paths = []
        existing_timestamps = []
        for path, timestamp in zip(image_paths, timestamps):
            if os.path.exists(path):
                existing_paths.append(path)
                existing_timestamps.append(timestamp)
            else:
                logger.warning(f"Fichier non trouv√©: {path}")
        
        if not existing_paths:
            logger.error("Aucun fichier image trouv√©. G√©n√©ration de donn√©es synth√©tiques...")
            # Cr√©er des donn√©es synth√©tiques pour la d√©monstration
            existing_paths = ["synthetic_data"] * 5
            existing_timestamps = [datetime(2023, 1, 1) + timedelta(days=i*15) for i in range(5)]
        
        # D√©finir la p√©riode d'analyse
        start_analysis = min(existing_timestamps)
        end_analysis = max(existing_timestamps)
        
        logger.info(f"P√©riode d'analyse: {start_analysis} √† {end_analysis}")
        
        # Sc√©narios climatiques pour l'√©valuation de vuln√©rabilit√©
        climate_scenarios = {
            'sea_level_rise': 0.5,        # 50 cm d'√©l√©vation du niveau de la mer
            'temperature_increase': 2.5,   # 2.5¬∞C d'augmentation de temp√©rature
            'storm_frequency': 1.3         # 30% d'augmentation de la fr√©quence des temp√™tes
        }
        
        logger.info("Sc√©narios climatiques:")
        for scenario, value in climate_scenarios.items():
            logger.info(f"  - {scenario}: {value}")
        
        # Ex√©cuter l'analyse compl√®te
        logger.info("D√©marrage de l'analyse hydrodynamique compl√®te...")
        
        results = hydro_model.run_complete_analysis(
            image_paths=existing_paths,
            timestamps=existing_timestamps,
            start_date=start_analysis,
            end_date=end_analysis,
            climate_scenarios=climate_scenarios
        )
        
        # Afficher les r√©sultats principaux
        logger.info("\n=== R√âSULTATS PRINCIPAUX ===")
        
        if 'mangrove_classification' in results:
            type_stats = results['mangrove_classification']['type_statistics']
            logger.info("R√©partition des types de mangroves:")
            for mangrove_type, stats in type_stats.items():
                logger.info(f"  - {mangrove_type}: {stats['percentage']:.1f}% ({stats['count']} pixels)")
        
        if 'carbon_analysis' in results:
            carbon_stats = results['carbon_analysis']['carbon_report']['global_statistics']
            logger.info("\nAnalyse du carbone:")
            logger.info(f"  - Surface totale: {carbon_stats['total_area_ha']:.1f} ha")
            logger.info(f"  - S√©questration annuelle: {carbon_stats['total_annual_sequestration_MgC']:.1f} Mg C/an")
            logger.info(f"  - Stock total de carbone: {carbon_stats['total_carbon_stock_MgC']:.1f} Mg C")
            logger.info(f"  - Taux moyen de s√©questration: {carbon_stats['mean_sequestration_rate_MgC_ha_yr']:.2f} Mg C/ha/an")
            
            vulnerability_stats = results['carbon_analysis']['carbon_report']['vulnerability_assessment']
            logger.info(f"\nVuln√©rabilit√© climatique:")
            logger.info(f"  - Vuln√©rabilit√© moyenne: {vulnerability_stats['mean_vulnerability']:.2f}")
            logger.info(f"  - Perte potentielle de carbone: {vulnerability_stats['potential_carbon_loss_MgC']:.1f} Mg C ({vulnerability_stats['carbon_loss_percentage']:.1f}%)")
            logger.info(f"  - Zone hautement vuln√©rable: {vulnerability_stats['high_vulnerability_area_ha']:.1f} ha")
        
        if 'tidal_correlations' in results:
            correlations = results['tidal_correlations']['spectral_correlations']
            if correlations:
                logger.info("\nCorreptions mar√©es-v√©g√©tation:")
                for index, corr_data in correlations.items():
                    if isinstance(corr_data, dict) and 'pearson_correlation' in corr_data:
                        corr_value = corr_data['pearson_correlation']
                        logger.info(f"  - {index.upper()}: r = {corr_value:.3f}")
        
        # Exporter les r√©sultats
        output_dir = os.path.join(cfg.OUTPUT_DIR, "carbon_dynamics_analysis")
        hydro_model.export_results(output_dir, "mangrove_carbon_dynamics")
        
        logger.info(f"\n=== ANALYSE TERMIN√âE ===")
        logger.info(f"R√©sultats export√©s vers: {output_dir}")
        
        # Recommandations bas√©es sur les r√©sultats
        logger.info("\n=== RECOMMANDATIONS ===")
        
        if 'carbon_analysis' in results:
            vulnerability_stats = results['carbon_analysis']['carbon_report']['vulnerability_assessment']
            vuln_level = vulnerability_stats['mean_vulnerability']
            
            if vuln_level > 0.7:
                logger.info("üî¥ VULN√âRABILIT√â √âLEV√âE:")
                logger.info("  - Mise en place urgente de mesures de protection")
                logger.info("  - Surveillance accrue des zones √† risque")
                logger.info("  - Strat√©gies d'adaptation climatique n√©cessaires")
            elif vuln_level > 0.4:
                logger.info("üü° VULN√âRABILIT√â MOD√âR√âE:")
                logger.info("  - Surveillance r√©guli√®re recommand√©e")
                logger.info("  - Planification pr√©ventive des mesures de protection")
            else:
                logger.info("üü¢ VULN√âRABILIT√â FAIBLE:")
                logger.info("  - Maintien des pratiques de conservation actuelles")
                logger.info("  - Surveillance de routine suffisante")
            
            # Recommandations par type de mangrove
            type_stats = results['mangrove_classification']['type_statistics']
            if 'estuarine' in type_stats and type_stats['estuarine']['percentage'] > 50:
                logger.info("\nüåä DOMINANCE ESTUARIENNE:")
                logger.info("  - Fort potentiel de s√©questration de carbone")
                logger.info("  - Surveillance de la qualit√© de l'eau recommand√©e")
                logger.info("  - Protection contre la pollution urbaine/industrielle")
            
            if 'marine' in type_stats and type_stats['marine']['percentage'] > 30:
                logger.info("\nüåä EXPOSITION MARINE IMPORTANTE:")
                logger.info("  - Vuln√©rabilit√© √† l'√©l√©vation du niveau de la mer")
                logger.info("  - Mesures de protection c√¥ti√®re √† envisager")
                logger.info("  - Surveillance de l'√©rosion c√¥ti√®re")
        
        return results
        
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse: {e}")
        raise


if __name__ == "__main__":
    try:
        results = main()
        logger.info("Script termin√© avec succ√®s")
    except Exception as e:
        logger.error(f"√âchec du script: {e}")
        sys.exit(1)
